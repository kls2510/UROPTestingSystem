<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html.
 -->
 
 <!-- Notes: Default severity for each check is error; change to warning by including <property name="severity" value="warning" />
 			 The message displayed for each problem is of the format "general problem ~ advice/more detail" 
 			 Each message needs to override a key which is different for each Checker Module.
 			    A list of these keys can be found on this website:
 			    http://grepcode.com/file/repo1.maven.org/maven2/com.puppycrawl.tools/checkstyle/5.2/com/puppycrawl/tools/checkstyle/checks/coding/messages.properties?av=f
 			 For a full list of built-in checks: http://checkstyle.sourceforge.net/availablechecks.html
 			 -->

<module name="Checker">
	<!-- check for presence of TODO or FIXME in comments -->
	<module name="RegexpSingleline">
	    <property name="format" value="((//.*)|(\*.*))((TO|to|To)\-*(DO|do|Do)|FIXME|fixme|FixMe|Fixme)" />
	    <property name="message" value="TODO or FIXME found in comment"/>
	</module>
	
	<!-- check for too much whitespace between anything (i.e. more than one space) -->
	<module name="RegexpSingleline">
	    <property name="format"  value="\S\s{2,}\S" />
	    <property name="message" value='Multiple spaces ~ only single spaces should be used within lines'/>
	    <property name="severity" value="warning" />
	</module>
	
	<!-- check for tabs in lines -->
	<module name="RegexpSingleline">
	    <property name="format"  value="\S\t" />
	    <property name="message" value='Tab in line ~ tabs should only be used as whitespace at the beginning of lines'/>
	    <property name="severity" value="warning" />
	</module>
	
	<module name="TreeWalker">
		<!-- Check Indentation -->
		<module name="Indentation">
			<property name="caseIndent"      value="4"/>  <!-- Checks that case indents are 4 spaces -->
			<property name="basicOffset"     value="4"/>  <!-- Number of spaces to take as equivalent to tab. Set to tab is equivalent to 4 spaces -->
			<property name="braceAdjustment" value="0"/>  <!-- Checks that open braces which are moved to next line are not indented-->
			<property name="throwsIndent"    value="4"/>  <!-- Checks that throws statements which are moved to next line are exactly one indentation level in-->
			<message key="indentation.error"       value="Bad indentation ~ expected ''{2}'' spaces, found ''{1}''" />
			<message key="indentation.child.error" value="Bad indentation ~ expected ''{2}'' spaces, found ''{1}''" /> <!-- I have no idea why I need this -->
			<property name="severity" value="warning" />
		</module>
		
		<!-- Checks for redundant import statements. An import is redundant if it is duplicated, in the same package, or imports java.lang -->
		<module name="RedundantImport">
			<message key="import.duplicate" value="Duplicate import ~ ''{1}'' already imported in line ''{0}''" />
			<message key="import.lang"      value="Unnecessary import ~ java.lang is imported automatically" />
			<message key="import.same"      value="Unnecessary import ~ ''{0}'' is imported automatically because it is in the same package"/>
			<property name="severity" value="warning" />
		</module>
		
		<!-- Checks for unused imports -->
		<module name="UnusedImports">
			<message key="import.unused" value="Unused import ~ ''{0}''" />
			<property name="severity" value="warning" />
		</module>
		
		<!-- Checks for empty catch, do, if else, finally. try, for, while, and init blocks, but NOT empty exception declarations. 
				Commented blocks do not count as empty -->
		<module name="EmptyBlock">
   			<property name="tokens" value="LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR, LITERAL_TRY, LITERAL_WHILE, INSTANCE_INIT, STATIC_INIT"/>
   			<property name="option" value="text"/> <!-- Without this, blocks containing only comments would count as being empty -->
   			<message key="block.empty" value="Empty ''{0}'' block ~ if it should never run, a justifying comment in the block is required" />
		</module>
		
		<!-- Checks that the listed tokens are surrounded by whitespace -->
		<module name="WhitespaceAround">
     		<property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR,
        			BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,
        			EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
        			LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
        			LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
        			MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,
        			SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN"/>
        	<message key="ws.notPreceded" value="Operator whitespace ~ ''{0}'' should be preceded with whitespace" />
        	<message key="ws.notFollowed" value="Operator whitespace ~ ''{0}'' should be followed with whitespace" />
      		<property name="severity" value="warning" />
    	</module>
    	
    	<!-- Checks that there is no whitespace before ; . - - ++ -->
    	<module name="NoWhitespaceBefore">
    		<message key="ws.preceded" value="Preceding whitespace ~ ''{0}'' should not be preceded by whitespace" />
    		<property name="severity" value="warning" />
    	</module>
    	
    	<!-- Checks that there is no whitespace after . ++ - - ! ~ -->
    	<module name="NoWhitespaceAfter">
    		<property name="tokens" value="DOT, INC, DEC, LNOT, BNOT" />
    		<message  key ="ws.followed" value="Succeeding whitespace ~ ''{0}'' should not be followed by whitespace" />
    		<property name="severity" value="warning" />
    	</module>
		
		<!-- Checks that strings are not compared with == or != -->
		<module name="StringLiteralEquality">
			<message key="string.literal.equality" value="String comparison with ''{0}'' ~ in Java, .equals() should be used" />
		</module>
		
		<!-- Check that Java naming conventions are observed -->
		<module name="AbstractClassName"> <!-- ^Abstract.*$|^.*Factory$ -->
			<property name="severity" value="warning" /> 
		</module>
		<module name="ClassTypeParameterName"> <!-- ^[A-Z]$ -->
			<property name="severity" value="warning" /> 
		</module>
		<module name="ConstantName"> <!-- ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$ -->
			<property name="severity" value="warning" /> 
		</module>
		<module name="LocalFinalVariableName"> <!-- ^[a-z][a-zA-Z0-9]*$ -->	
			<property name="severity" value="warning" /> 
		</module>
		<module name="LocalVariableName"> <!-- ^[a-z][a-zA-Z0-9]*$ -->
			<property name="severity" value="warning" /> 
		</module>
		<module name="MemberName"> <!-- ^[a-z][a-zA-Z0-9]*$ -->	
			<property name="severity" value="warning" /> 
		</module>				
		<module name="MethodName" > <!-- ^[a-z][a-zA-Z0-9]*$ -->	
			<property name="severity" value="warning" /> 
		</module>		
		<module name="MethodTypeParameterName" > <!-- ^[A-Z]$-->
			<property name="severity" value="warning" /> 
		</module>
		<module name="ParameterName" > <!-- ^[a-z][a-zA-Z0-9]*$ -->	
			<property name="severity" value="warning" /> 
		</module>	
		<module name="StaticVariableName" >	<!-- ^[a-z][a-zA-Z0-9]*$ -->	
			<property name="severity" value="warning" /> 
		</module>		
		<module name="TypeName" ><!-- ^[A-Z][a-zA-Z0-9]*$ -->
			<property name="severity" value="warning" /> 
		</module>
			
		<!-- checks that long variables are declared with an upper case L instead of a lower case l -->
		<module name="UpperEll">
			<message key="upperEll" value="Lower case long assignment ~ using upper case L instead of lower case l is much more readable" />
			<property name="severity" value="warning" />
		</module>
		
		<!-- checks that the catch default is last -->
		<module name="DefaultComesLast">
			<message key="default.comes.last" value="Switch default label is not last ~ putting the default label at the end of a switch statement is recommended practice" />
			<property name="severity" value="warning" />
		</module>		
		
		<!-- checks for Exception, RuntimeException, and Throwable being caught -->
		<module name="IllegalCatch">
			<message key="illegal.catch" value="Catching ''{0}'' is bad practice" />
		</module>
		
		<!-- checks for Exception, RuntimeException, and Throwable, and Error being thrown -->
		<module name="IllegalThrows">
			<property name="illegalClassNames" value="java.lang.Throwable, java.lang.Error, java.lang.RuntimeException, java.lang.Exception" />
			<message key="illegal.throw" value="Throwing ''{0}'' is bad practice" />
		</module>
		
		<!-- @Override annotation check demo (doesn't work yet) -->
		<!--<module name="Regexp">
			<property name="format" value="@Override\s*public\s*void\s*overridingFunction" />
			<property name="illegalPattern" value="false" /> 
		</module>-->		
	</module>
</module>
